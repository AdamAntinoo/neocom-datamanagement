//	PROJECT:        EVEIndustrialist (EVEI)
//	AUTHORS:        Adam Antinoo - adamantinoo.git@gmail.com
//	COPYRIGHT:      (c) 2013-2014 by Dimensinfin Industries, all rights reserved.
//	ENVIRONMENT:		Android API11.
//	DESCRIPTION:		Application helper for Eve Online Industrialists. Will help on Industry and Manufacture.

package org.dimensinfin.evedroid.activity;

//- IMPORT SECTION .........................................................................................
import org.dimensinfin.evedroid.activity.core.PilotPagerActivity;
import org.dimensinfin.evedroid.constant.AppWideConstants;
import org.dimensinfin.evedroid.fragment.JobActionsFragment;
import org.dimensinfin.evedroid.fragment.ManufactureLOMFragment;
import org.dimensinfin.evedroid.industry.JobManager;
import org.dimensinfin.evedroid.storage.AppModelStore;
import org.dimensinfin.eveonline.neocom.model.NeoComBlueprint;

import android.os.Bundle;
import android.util.Log;

/**
 * The activity will create a two page swipe display where it will show the requirement to run the available
 * jobs for the selected blueprint and the other will show the resource composition page from the Item Detail
 * structure with the costs related to the manufacturing if this type of items.<br>
 * 
 * This Activity requires at least two arguments, first the selected pilot but that one can be preinstalled
 * from other activities, or not if the app was removed from memory. Second the blueprint ID that is the asset
 * localizer for a Blueprint instance.<br>
 * The action to be performed by the activity method are the standard for all activities:
 * <ul>
 * <li>It will define the initial title and subtitle for the ActionBar.</li>
 * <li>Will read the arguments received on the extras block and from them instantiate the application data
 * store where all global data structures will be accessible.</li>
 * <li>If the activity makes use of the header, as is this case, it will create the part or parts that have to
 * be visualized inside the header. That elements usually go to all the pages that the activity creates. In
 * this particular activity the pages are the Job requirements page where the use may see the resources
 * required to complete jobs and the LOM for manufacture building for the selected blueprint.</li>
 * <li>It will create the corresponding fragment. Most of the instantiations will be a generic
 * <code>PagerFragment</code>. If the cases where the fragment should implement context menus there should be
 * a new fragment class derived from the base <code>PagerFragment</code></li>
 * <li>The it will configure the fragment. Required parameters are the <code>identifier</code> and the
 * <code>dataSource</code>. This last element may be made optional if we consider the default datasource the
 * same one generated by the factory using the identifier value.</li>
 * <li>Additional to this we can add elements to the page header. These elements are Parts of any class. Do
 * not forget to setup the correct renderer code for the presentation variant.</li>
 * </ul>
 * The instantiation and configuration will make use of the Activity bundle extras. Those extras are the
 * parametrization parameters for the Activity and are mostly required if we need the Activity to be
 * reinstantiable and do not broke when the application is removed from memory.
 * 
 * @author Adam Antinoo
 */
// - CLASS IMPLEMENTATION ...................................................................................
public class IndustryT2Activity extends PilotPagerActivity {
	// - S T A T I C - S E C T I O N ..........................................................................

	// - F I E L D - S E C T I O N ............................................................................

	// - C O N S T R U C T O R - S E C T I O N ................................................................

	// - M E T H O D - S E C T I O N ..........................................................................
	/**
	 * Do the standard interface initialization, like the action bar and the page adapter. During the creation
	 * of the fragments check if they are already registered to avoid duplicate and exception when the old
	 * fragments get control. There are some variants depending on the job activity, beint it Manufacturing or
	 * Invention.
	 */
	@Override
	protected void onCreate(final Bundle savedInstanceState) {
		Log.i("NEOCOM", ">> IndustryT2Activity.onCreate"); //$NON-NLS-1$
		super.onCreate(savedInstanceState);
		try {
			//REFACTOR Review the RT messages and the catch clause.
			// Instantiate the blueprint from the ID.
			final Bundle extras = this.getIntent().getExtras();
			final long bpassetid = extras.getLong(AppWideConstants.EExtras.EXTRA_BLUEPRINTID.name());
			//		final int activity = extras.getInt(AppWideConstants.extras.EXTRA_BLUEPRINTACTIVITY);
			if (bpassetid > 0) {
				final NeoComBlueprint blueprint = AppModelStore.getSingleton().getPilot().getAssetsManager()
						.searchBlueprintByID(bpassetid);
				if (null == blueprint) throw new RuntimeException(
						"RT IndustryT2Activity.onCreate - Unable to continue. Expected blueprint not located.");

				// Initialize the list of assets with the real assets and then remove the resources used by the pending jobs.
				JobManager.initializeAssets(AppModelStore.getSingleton().getPilot());
				// Create the pages that form this Activity. Each page implemented by a Fragment.
				int page = 0;
				//
				// Create the Manufacture/Invention Job Page.
				JobActionsFragment frag = new JobActionsFragment();
				frag.setStore(AppModelStore.getSingleton());
				frag.setExtras(extras);
				this.addPage(frag, page++);
				// Create the Manufacture/Invention Resources Page.
				this.addPage(new ManufactureLOMFragment(AppModelStore.getSingleton()).setExtras(extras), page++);
			} else
				throw new RuntimeException(
						"RT IndustryT2Activity.onCreate - Unable to continue. Required parameters not defined on Extras.");
		} catch (final Exception rtex) {
			Log.e("EVEI", "R> Runtime Exception on IndustryT2Activity.onCreate." + rtex.getMessage());
			rtex.printStackTrace();
			this.stopActivity(rtex);
		}
		// Reinitialize the tile and subtitle from the first page.
		this.updateInitialTitle();
		Log.i("EVEI", "<< IndustryT2Activity.onCreate"); //$NON-NLS-1$
	}
}
//- UNUSED CODE ............................................................................................
