// - P L U G I N S
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}
plugins {
    id 'java'
    id 'maven-publish'
    id 'project-report'
    id 'idea'
    id "org.sonarqube" version "3.0"
}

// - P R O J E C T   D E F I N I T I O N
group = 'org.dimensinfin.neocom'
version = '0.20.0'
archivesBaseName = 'neocom-datamanagement'
description = 'Data management and processes that are common to all developments.'
ext {
    SDEDatabaseVersion = '20190530-APP'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

// - S O U R C E S
sourceSets {
    main.java {
        srcDirs += 'src/main/java'
        srcDirs += 'src/main/java-adapter'
        srcDirs += 'src/main/java-database'
        srcDirs += 'src/main/java-android'
        srcDirs += 'src/main/java-industry'
    }
    test.java {
        srcDirs += 'src/test/java'
        srcDirs += 'src/test/java-support'
    }
//    integration.java {
////        srcDirs += 'src/main/java-adapter'
////        srcDirs += 'src/main/java-database'
////        srcDirs += 'src/main/java-android'
////        srcDirs += 'src/main/java-industry'
////        srcDirs += 'src/integration/java'
//    }
}
// - C O N F I G U R A T I O N S
//configurations {
//    integrationImplementation.extendsFrom testImplementation
//}
// - D E P E N D E N C I E S
apply from: './dependencies.gradle'
// - C O V E R A G E
apply from: './jacoco.gradle'
// - P U B L I S H I N G
apply from: './publishing.gradle'

// - S O N A R Q U B E
sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "evedimensinfin"
        property "sonar.projectKey", "evedimensinfin_neocom-datamanagement"
        property "sonar.projectName", "NeoCom - DataManagement"
        property "sonar.projectVersion", project.version
        property "sonar.projectDescription", project.description
        property "sonar.sourceEncoding","UTF-8"

        property "sonar.login", "0aba8345fa52a3a9500132cd200b62eecf55199f"
    }
}

task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}