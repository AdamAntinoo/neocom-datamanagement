# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# CircleCI has the ability to deploy to Heroku and integrate more than one
#   project on the same pipeline.
# 
# BRANCHES:
#   Experimental: This branch is used to add code that should be confirmed and tested it is operational before going to development.
#                 Usually this is when some changes break the API or are disruptive with previous running code.
#                 The only actions are to compile the source code.
#   Development: This branch compiles the code and checks that the installation and preparation stages are ready.
#                Used to confirm there are no defects on the compilation code.
#   Testing: This branch activates all unit tests, integration and acceptance tests.
#            After the testing completes successfully then the script activated the steps to update the sonarcloud quality gate data.
#
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          command: |
            ./gradlew --version

  cache-dependencies:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: DATAMANAGEMENT - Get and cache the compilation dependencies
          command: |
            ./gradlew dependencies --refresh-dependencies
      - save_cache:
          paths:
            - ~/project/.gradle
          key: v1-dependencies-{{ checksum "~/project/dependencies.gradle" }}

  compile-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/project/dependencies.gradle" }}
            - v1-dependencies-
      - run:
          name: DATAMANAGEMENT - Compile the current library code
          command: |
            ./gradlew compileJava

  test-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/project/dependencies.gradle" }}
      - run:
          name: DATAMANAGEMENT - Unit Testing application
          command: |
            ./gradlew test
      - store_test_results:
          path: ~/project/build/test-results/test
      - store_artifacts:
          path: ~/project/build/libs
      - save_cache:
          paths:
            - ~/project/.gradle
            - ~/project/build
          key: v1-build-{{ checksum "~/project/build.gradle" }}
  integration-datamanagement-job:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-build-{{ checksum "~/project/build.gradle" }}
      - run:
          name: DATAMANAGEMENT - Validate the CI machine configuration
          command: |
            ./gradlew --version
            sudo snap install figlet
            sudo snap install redis
      - run:
          name: DATAMANAGEMENT - Prepare the installation for the SDE database
          working_directory: src/integration/sh
          command: |
            ./update-sde.sh
            ./install-sde.sh
      - run:
          name: DATAMANAGEMENT - Generate build resources and get them ready
          command: |
            ./gradlew processIntegrationResources
      - run:
          name: DATAMANAGEMENT - Start the docker simulators
          command: |
            ./docker-service.sh start integration
      - run:
          name: DATAMANAGEMENT - Integration Testing application
          environment:
            PROPERTIES_DIRECTORY: "/src/integration/resources/properties"
            APPLICATION_DIRECTORY: "appDirectory"
          command: |
            ./gradlew test integrationTest jacocoTestReport
      - store_test_results:
          path: ~/project/build/test-results
      - save_cache:
          paths:
            - ~/project/.gradle
            - ~/project/build
            - ~/project/coverage
          key: v1-build-{{ checksum "~/project/build.gradle" }}
  quality-sonarcloud-backend:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-build-{{ checksum "~/project/build.gradle" }}
      - run:
          name: DATAMANAGEMENT - Update SonarQube statistics
          environment:
            SONAR_TOKEN: 852b9705880c9090a25e0d76440c1585c5d03fe4
            sonar.login: 852b9705880c9090a25e0d76440c1585c5d03fe4
          command: |
            ./gradlew sonarqube

  build-datamanagement-job:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-build-{{ checksum "~/project/build.gradle" }}
            - v1-build-
      - run:
          name: DATAMANAGEMENT - Validate the CI machine configuration
          command: |
            ./gradlew --version
            sudo snap install figlet
            sudo snap install redis
      - run:
          name: DATAMANAGEMENT - Generate the SDE database
          working_directory: src/integration/sh
          command: |
            ./update-sde.sh
            ./install-sde.sh
      - run:
          name: BACKEND - Build the library as to be deployed from JitPack
          command: |
            ./gradlew clean build -xtest -xintegrationTest

workflows:
  version: 2
  datamanagement-stage:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - cache-dependencies:
          filters:
            branches:
              only:
                - experimental
                - development
                - test

      - compile-datamanagement-job:
          requires:
            - start-job
            - cache-dependencies
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - test-datamanagement-job:
          requires:
            - compile-datamanagement-job
          filters:
            branches:
              only:
                - test
      - integration-datamanagement-job:
          requires:
            - compile-datamanagement-job
            - test-datamanagement-job
          filters:
            branches:
              only:
                - test
      - quality-sonarcloud-backend:
          requires:
            - compile-datamanagement-job
            - test-datamanagement-job
            - integration-datamanagement-job
          filters:
            branches:
              only:
                - test
      - build-datamanagement-job:
          requires:
            - compile-datamanagement-job
            - test-datamanagement-job
            - integration-datamanagement-job
          filters:
            branches:
              only:
                - master

  datamanagement-deploy:
    jobs:
      - start-job:
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/

      - test-datamanagement-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - integration-datamanagement-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - build-datamanagement-job:
          requires:
            - test-datamanagement-job
            - integration-datamanagement-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
