# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# CircleCI has the ability to deploy to Heroku and integrate more than one
#   project on the same pipeline.
# 
# BRANCHES:
#   Experimental: This branch is used to add code that should be confirmed and tested it is operational before going to development.
#                 Usually this is when some changes break the API or are disruptive with previous running code.
#                 The only actions are to compile the source code.
#   Development: This branch compiles the code and checks that the installation and preparation stages are ready.
#                Used to confirm there are no defects on the compilation code.
#   Testing: This branch activales all unit tests, integration and accceptance tests.
#            After the testing completes suucessfully then the script activated the steps to update the sonarcloud quality gate data.
#
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          command: |
            ./gradlew --version

  cache-dependencies:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run: 
          name: DATAMANAGEMENT - Get and cache the compilation dependencies
          command: |
            ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "dependencies.gradle" }}

  compile-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "dependencies.gradle" }}
          - v1-dependencies-
      - run:
          name: DATAMANAGEMENT - Compile the current library code
          command: |
            ./gradlew classes

  test-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "dependencies.gradle" }}
          - v1-dependencies-
      - run:
          name: BACKEND - Unit Testing application
          command: |
            ./gradlew test
      - store_test_results:
          path: ~/build/test-results
      - store_artifacts:  
          path: ~/build/libs
  acceptance-test-datamanagement-job:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: BACKEND - Generate the SDE database
          working_directory: src/integration/sh
          command: |
            mkdir downloads
            rm -rf *.db
            rm -rf *.csv
            ./update-sde.sh
            ./create-sde.sh
            ./install-sde.sh
      # - restore_cache:
      #     keys:
      #     - v1-dependencies-{{ checksum "dependencies.gradle" }}
      #     - v1-dependencies-
      # - run:
      #     name: BACKEND - Validate the CI machine configuration
      #     command: |
      #       ./gradlew --version
      #       sudo snap install figlet
      # - run:
      #     name: BACKEND - Start the docker simulators
      #     command: |
      #       ./docker-service.sh start integration
      - run:
          name: BACKEND - Integration Testing application
          environment:
            PROPERTIES_DIRECTORY: "/src/integration/resources/properties"
            APPLICATION_DIRECTORY: "appDirectory"
          command: |
            ./gradlew integrationTest
      # - store_test_results:
      #     path: ~/project/NeoCom.DataManagement/build/test-results
      # - store_artifacts:
      #     path: ~/project/NeoCom.DataManagement/build/libs

  build-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "dependencies.gradle" }}
          - v1-dependencies-
      - run:
          name: BACKEND - Build the library to be deployed from JitPack
          command: |
            ./gradlew build

workflows:
  version: 2
  datamanagement-stage:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - cache-dependencies:
          filters:
            branches:
              only:
                - experimental
                - development
                - test

      - compile-datamanagement-job:
          requires:
            - start-job
            - cache-dependencies
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - test-datamanagement-job:
          requires:
            - compile-datamanagement-job
          filters:
            branches:
              only:
                - test
      - acceptance-test-datamanagement-job:
          requires:
            - compile-datamanagement-job
            - test-datamanagement-job
          filters:
            branches:
              only:
                - test

  datamanagement-deploy:
    jobs:
      - start-job:
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/

      - test-datamanagement-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - build-datamanagement-job:
          requires:
            - test-datamanagement-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
