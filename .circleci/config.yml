# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# CircleCI has the ability to deploy to Heroku and integrate more than one
#   project on the same pipeline.
# 
# BRANCHES:
#   Experimental: This branch is used to add code that should be confirmed and tested it is operational before going to development.
#                 Usually this is when some changes break the API or are disruptive with previous running code.
#                 The only actions are to compile the source code.
#   Development: This branch compiles the code and checks that the installation and preparation stages are ready.
#                Used to confirm there are no defects on the compilation code.
#   Testing: This branch activales all unit tests, integration and accceptance tests.
#            After the testing completes suucessfully then the script activated the steps to update the sonarcloud quality gate data.
#
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          command: |
            wait 5
            ./gradlew --version

  compile-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: DATAMANAGEMENT - Compile the current library code
          command: |
            ./gradlew classes

  test-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - run:
          name: BACKEND - Unit Testing application
          command: |
            ./gradlew test
      - run:
          name: BACKEND - Starting api simulation for ESI Authentication
          environment:
            PORT: 5310
          command: |
            ./support-service.sh start "/esioauth-simulation" 5310
          background: true
      - run:
          name: BACKEND - Starting api simulation for ESI Data Service
          environment:
            PORT: 5320
          command: |
            ./support-service.sh start "/esidata-simulation" 5320
          background: true
      - run:
          name: BACKEND - Waiting for simulations start
          environment:
            PORT: 5320
          command: |
            wait 5
            netstat -na | grep LISTEN
            wait 5
#            dockerize -wait tcp://localhost:${PORT}/universe/races/ -timeout 3m
      - run:
          name: BACKEND - Integration Testing application
          environment:
            PROPERTIES_DIRECTORY: "/src/integration/resources/properties"
            APPLICATION_DIRECTORY: "appDirectory"
          command: |
            ./gradlew integrationTest
      - store_test_results:
          path: ~/project/NeoCom.DataManagement/build/test-results
      - store_artifacts:  
          path: ~/project/NeoCom.DataManagement/build/libs

  build-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - run:
          name: BACKEND - Build the library to be deployed from JitPack
          environment:
            PORT: 5140
            JDBC_DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
            SONAR_TOKEN: 4d2d1c6898c0815bf4862283c8179c8c5bb46724
          command: |
            ./gradlew integrationTest build

workflows:
  version: 2
  datamanagement-stage:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test

      - compile-datamanagement-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - test-datamanagement-job:
          requires:
            - compile-datamanagement-job
          filters:
            branches:
              only:
                - test

  datamanagement-deploy:
    jobs:
      - start-job:
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/

      - test-datamanagement-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - build-datamanagement-job:
          requires:
            - test-datamanagement-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
