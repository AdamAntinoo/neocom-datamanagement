# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# CircleCI has the ability to deploy to Heroku and integrate more than one
#   project on the same pipeline.
# 
# BRANCHES:
#   Experimental: This branch is used to add code that should be confirmed and tested it is operational before going to development.
#                 Usually this is when some changes break the API or are disruptive with previous running code.
#                 The only actions are to compile the source code.
#   Development: This branch compiles the code and checks that the installation and preparation stages are ready.
#                Used to confirm there are no defects on the compilation code.
#   Testing: This branch activales all unit tests, integration and accceptance tests.
#            After the testing completes suucessfully then the script activated the steps to update the sonarcloud quality gate data.
#
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          command: |
            ./gradlew --version

  compile-swagger-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: ESISWAGGER - Compile the current library
          working_directory: ESI.SwaggerApi
          command: |
            ../gradlew classes
  compile-annotations-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: NEOCOM-ANNOTATIONS - Compile the annotations defintions
          working_directory: NeoCom.Annotations
          command: |
            ../gradlew classes
  compile-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: DATAMANAGEMENT - Compile the current library code
          working_directory: NeoCom.DataManagement
          command: |
            ../gradlew classes

  test-datamanagement-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      # - image: circleci/postgres:11.1
      #   environment:
      #     POSTGRES_USER: inno-user
      #     POSTGRES_DB: inno-password
    steps:
      - checkout
      # - run:
      #     name: BACKEND - Start the application in local profile
      #     working_directory: NeoCom.DataManagement
      #     environment:
      #       PORT: 5340 # This is the port configured on the AcceptancetargetConfig
      #       JDBC_DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
      #       DB_USER: inno-user
      #       DB_PASSWORD: inno-password
      #     command: |
      #       ./gradlew bootRun
      #     background: true
      # - run:
      #     name: BACKEND - Waiting for application start
      #     environment:
      #       PORT: 5140
      #     working_directory: Printer3D-backend
      #     command: |
      #       dockerize -wait tcp://localhost:${PORT}/actuator/health -timeout 3m
      - run:
          name: BACKEND - Unit Testing application
          working_directory: NeoCom.DataManagement
          environment:
            PORT: 5140
            JDBC_DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
          command: |
            ../gradlew test
      - store_test_results:
          path: ~/project/NeoCom.DataManagement/build/test-results
      - store_artifacts:  
          path: ~/project/NeoCom.DataManagement/build/libs

workflows:
  version: 2
  datamanagement-stage:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - experimental
                - development

      - compile-swagger-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - compile-annotations-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - compile-datamanagement-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - test-datamanagement-job:
          requires:
            - compile-swagger-job
            - compile-annotations-job
            - compile-datamanagement-job
          filters:
            branches:
              only:
                - test
